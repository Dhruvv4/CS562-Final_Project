# Database management System 2 Project
# Current functionality.
# 1. Fetched all the data.
# 2. Parsing of the input file and saved in MF_Struct
# 3. Aggregate functions vaguely implemented.
#     sum, avg, min, max, count
# 4. Check with Having clause predicate. 
    # Need to work on operators - '=', '<', '>', '<=', '>=', '<>', 'in'

# Need to work on
# 1. Get all columns.
# 2. Select attributes - 


import subprocess
from helper import readFileByLines, groupingVariables, get_MF_Struct, get_where_conditions, print_MFStruct, get_algorithm

def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """
    file_no = 4
    file_path = f'./input/input{file_no}.txt'
    MF_struct = get_MF_Struct(file_path)
    # print(MF_struct, end='\n\n')
    gv_str = ", ".join([v.strip() for v in MF_struct["groupingAttributes"].split(',')])
    algorithm = get_algorithm(file_path)
    body =f"""#---Variable declaration
    sales_gb_group = defaultdict()
    #---end variable Declaration

    # Fetching all records from sales table
    all_records = get_all_records(cur)
    
    # output.field_names = all_records.split(',')

    groupTuple = "_".join([v.strip() for v in MF_Struct['groupingAttributes'].split(',')])

    # Only select those columns which are in the select attributes of the MF Structure
    for idx, (cust, prod, day, month, year, state, quantC, date) in enumerate(all_records, 1):

        # Aggregation block
        # Here we have to take into account for the aggregate variables and it's corresponding
        # column.
        {algorithm}

    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
from psycopg2 import Error, connect
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
from database.queryDatabase import get_all_records
load_dotenv()
from collections import defaultdict
from prettytable import PrettyTable
from helper import get_MF_Struct
from math import inf



# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    database = os.getenv('DB_DATABASE')
    host = os.getenv('DB_HOST')
    user = os.getenv('DB_USER')
    password = os.getenv('DB_PASSWORD')
    input_path = os.getenv('DB_INPUT_PATH')

    conn = connect(host=host,database=database,user=user,password=password)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")

    input_path = f'{file_path}'
    MF_Struct = get_MF_Struct(input_path)

    cols_name = [x.strip().lower() for x in MF_Struct['select'].split(',')]
    output = PrettyTable(cols_name)
    {body}
    return output



def main():
    query()
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open(f"output{file_no}.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", f"output{file_no}.py"])


if "__main__" == __name__:
    main()
