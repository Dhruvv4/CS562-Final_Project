import subprocess
from helper import readFileByLines, groupingVariables

def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """
    input_path = './input/input1.txt'
    # Reading the input file
    with open(input_path, 'r') as f:
        contents = f.read().split('\n')

    db_queries = {}

    for idx, line in enumerate(contents):
        if line == 'SELECT ATTRIBUTE(S):':
            db_queries['select'] = contents[idx+1]
        if line == 'NUMBER OF GROUPING VARIABLES(n):':
            db_queries['groupingVariables'] = int(contents[idx+1])
        if line == 'GROUPING ATTRIBUTES(V):':
            db_queries['groupingAttributes'] = contents[idx+1]
        if line == 'F-VECT([F]):':
            db_queries['listOfAggregateFuncs'] = contents[idx+1]
        if line == 'HAVING CLAUSE (G):':
            db_queries['havingClause'] = contents[idx+1]

    print(db_queries)
    print(groupingVariables(2))

    query = f"""
    SELECT {db_queries['select']}
    from sales
    """

    # This is for group by clause, checking whether we have any grouping variables present or no.
    if db_queries['groupingVariables'] > 0:
        query += f"""group by {db_queries['groupingAttributes']}{groupingVariables(db_queries['groupingVariables'])}\n"""
    else:
        query += f"""group by {db_queries['groupingAttributes']}\n"""

    # This is for having clause (G)
    print(db_queries['havingClause'])
    if db_queries['havingClause']:
        query += f"    having {db_queries['havingClause']};\n"
    
    print(query)

    body = """
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    """
    """
    Outline of the algorithm:
    
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    # open("_generated.py", "w").write(tmp)
    # Execute the generated code
    # subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
