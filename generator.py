# Database management System 2 Project
# Current functionality.
# 1. Fetched all the data.
# 2. Parsing of the input file and saved in MF_Struct
# 3. Aggregate functions vaguely implemented.
#     sum, avg, min, max, count
# 4. Check with Having clause predicate. 
    # Need to work on operators - '=', '<', '>', '<=', '>=', '<>', 'in'

# Need to work on
# 1. Get all columns.
# 2. Select attributes - 


import subprocess
from helper import readFileByLines, groupingVariables, get_MF_Struct, get_where_conditions

def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """
    MF_struct = get_MF_Struct('./input/input2a.txt')
    print(MF_struct)

    gv_str = ", ".join([v.strip() for v in MF_struct["groupingAttributes"].split(',')])
    some_Str = get_where_conditions(gv_str, 3, MF_struct['selectConditionVector'], MF_struct['listOfAggregateFuncs'])
    print(some_Str)
    body =f"""#---Variable declaration
    sales_gb_group = defaultdict()
    MF_Struct = defaultdict()
    #---end variable Declaration


    # def get_all_records(cur):
    #     get_all_records_query = '''SELECT * from sales;'''
    #     # Execute a command: this creates a new table
    #     cur.execute(get_all_records_query)
    #     all_sales = cur.fetchall()
    #     return all_sales

    # Fetching all records from sales table
    all_records = get_all_records(cur)

    #----Reading Input File
    input_path = './input/input1.txt'
    # Reading the input file
    with open(input_path, 'r') as f:
        contents = f.read().split('\\n')

    #----Outline Algorithm for reading attributes
    for idx, line in enumerate(contents):
        if line == 'SELECT ATTRIBUTE(S):':
            MF_Struct['select'] = contents[idx+1]
        if line == 'NUMBER OF GROUPING VARIABLES(n):':
            MF_Struct['groupingVariables'] = int(contents[idx+1])
        if line == 'GROUPING ATTRIBUTES(V):':
            MF_Struct['groupingAttributes'] = contents[idx+1]
        if line == 'F-VECT([F]):':
            MF_Struct['listOfAggregateFuncs'] = contents[idx+1]
        if line == 'SELECT CONDITION-VECT([C]):':
            conditions = []
            idx_t = idx + 1
            while True:
                if (contents[idx_t] == 'HAVING CLAUSE (G):'):
                    break
                conditions.append(contents[idx_t])
                idx_t += 1
                
            MF_Struct['selectConditionVector'] = conditions
        if line == 'HAVING CLAUSE (G):':
            # print('in having caluse')
            MF_Struct['havingClause'] = contents[idx+1]
            having_idx = int(idx)
            # if MF_Struct['havingClause'] == '-':
            #     del MF_Struct['havingClause']
    # output.field_names = all_records.split(',')

    groupTuple = "_".join([v.strip() for v in MF_Struct['groupingAttributes'].split(',')])

    # Only select those columns which are in the select attributes of the MF Structure
    for idx, (cust, prod, day, month, year, state, quantC, date) in enumerate(all_records, 1):

        # Aggregation block
        if ({gv_str}) in sales_gb_group:
            sales_gb_group[({gv_str})]['sumq'] += quantC
        else:
            sales_gb_group[({gv_str})] = dict()
            sales_gb_group[({gv_str})]['sumq'] = 0
    
    for raw in sales_gb_group.items():
        output.add_row([col for col in raw])

    # print(output)
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
from psycopg2 import Error, connect
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
from database.queryDatabase import get_all_records
load_dotenv()
from collections import defaultdict
from prettytable import PrettyTable


# for customer, data in sales_gb_cust.items():
#     row = [customer, data['avgq'], data['maxq']]
#     output.add_row(row)



# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    database = os.getenv('DB_DATABASE')
    host = os.getenv('DB_HOST')
    user = os.getenv('DB_USER')
    password = os.getenv('DB_PASSWORD')
    input_path = os.getenv('DB_INPUT_PATH')

    conn = connect(host=host,database=database,user=user,password=password)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    output = PrettyTable()
    {body}
    return output

def main():
    query()
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
